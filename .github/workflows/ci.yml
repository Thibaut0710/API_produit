name: CI/CD


on:
  push:
    branches: 
      - main
      - ci-cd
  pull_request:
    types: [closed]
    branches: 
      - main
      - ci-cd
  release:
    types: [release]

permissions:
  contents: read
  actions: read
  checks: write

jobs:

  docker-container-artifact:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t api-produit:latest .

      - name: Save Docker image to file
        run: |
          docker save api-produit:latest | gzip > api-produit-latest.tar.gz

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v3
        with:
          name: api-produit-docker-image
          path: api-produit-latest.tar.gz
    

  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.x'
        
    - name: Setup XUnit
      run: |
        dotnet add package xunit
        dotnet add package xunit.runner.visualstudio
        
    - name: Setup InMemory
      run: dotnet add package Microsoft.EntityFrameworkCore.InMemory
      
    - name: Setup Newtonsoft.Json
      run: dotnet add package Newtonsoft.Json
      
    - name: Clean
      run: |
        dotnet clean ./API_Produit.Tests/API_Produit.Tests.csproj
        dotnet clean API_Produit.csproj
    
    - name: Install Dependencies
      run: dotnet restore ./API_Produit.Tests/API_Produit.Tests.csproj

    - name: Build
      run: dotnet build ./API_Produit.Tests/API_Produit.Tests.csproj --no-restore

    - name: Run Unit Tests
      run: dotnet test ./API_Produit.Tests/API_Produit.Tests.csproj

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: master

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.x'

    - name: Install Dependencies
      run: dotnet restore master/API_Produit.csproj

    - name: Build
      run: dotnet build master/API_Produit.csproj --no-restore

    - name: Publish API
      run: |
        echo "Publishing API_Produit..."
        dotnet publish master/API_Produit.csproj -c Release -o master/publish/API_Produit
        echo "Published API_Produit to master/publish/API_Produit"

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release_artifact
        path: master
        retention-seconds: 600

  release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GIT_TOKEN }}
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: release_artifact
        path: master
  
    - name: Bump version
      id: package_version
      uses: KageKirin/bump-csproj-version@v0
      with:
        file: API_Produit.csproj
        patch: true

    - name: Commit new version
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git commit -am "CI: bump version to ${{ steps.package_version.outputs.version  }}"
        git push https://${{ secrets.GIT_TOKEN }}@github.com/${{ github.repository }}.git
    
    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MAX_TOKEN }}
      with:
        tag_name: v${{ steps.package_version.outputs.version }}
        release_name: Release ${{ steps.package_version.outputs.version }}
        draft: false
        prerelease: false

    - name: Compress Published APIs
      run: |
        zip -r API_Produit.zip master/publish/API_Produit
    
    - name: Upload Release Assets - API_Produit
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MAX_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./API_Produit.zip
        asset_name: API_Produit.zip
        asset_content_type: application/zip

  deploy_pages:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2 

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
 
    - name: Install redoc-cli
      run: npm install -g redoc-cli
 
    - name: Generate HTML from openapi.json
      run: npx @redocly/cli build-docs public/index.html
 
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.MAX_TOKEN }}
        publish_dir: ./public
